// Copyright (c) farm-ng, inc.
//
// Licensed under the Amiga Development Kit License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://github.com/farm-ng/amiga-dev-kit/blob/main/LICENSE
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package farm_ng.canbus.proto;

service CanbusService {
  rpc streamCanbusMessages(StreamCanbusRequest)
      returns (stream StreamCanbusReply) {}
  rpc sendCanbusMessage(stream SendCanbusMessageRequest)
      returns (stream SendCanbusMessageReply) {}
  rpc streamMotorStates(StreamMotorStatesRequest)
      returns (stream StreamMotorStatesReply) {}
}

message StreamCanbusRequest {
}

message StreamCanbusReply {
  RawCanbusMessages messages = 1;
}

message SendCanbusMessageRequest {
  RawCanbusMessage message = 1;
}

message SendCanbusMessageReply {
  bool success = 1;
}

message RawCanbusMessage {
  // The time the message is "sent" on the canbus
  // in the steady_clock/time.montonic() time domain
  double stamp = 1;
  uint32 id = 2;
  bool error = 3;
  bool remote_transmission = 4;
  bytes data = 5;
}

message RawCanbusMessages {
  repeated RawCanbusMessage messages = 1;
}

message StreamMotorStatesRequest {
}

message MotorState {
    double stamp = 1;
    uint32 id = 2;
    uint32 status = 3;
    int32 rpm = 4;
    double voltage = 5;
    double current = 6;
    int32 temperature = 7;
}

message StreamMotorStatesReply {
  repeated MotorState motors = 1;
}
