// Copyright (c) farm-ng, inc.
//
// Licensed under the Amiga Development Kit License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://github.com/farm-ng/amiga-dev-kit/blob/main/LICENSE
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Copyright (c) farm-ng, inc. All rights reserved.

syntax = "proto3";

import "farm_ng/imu/imu.proto";

import "farm_ng/core/linalg.proto";
import "farm_ng/core/pose.proto";

package farm_ng.amiga.proto;

message AmigaRobotConfig {
  // List of poses
  farm_ng.core.proto.PoseTree pose_tree = 1;
  map<string, farm_ng.imu.proto.ImuBias> imus = 3;
  map<string, WheelConfig> wheels = 4;
}

message WheelConfig {
  // ID of motor controller on canbus
  uint32 canbus_id = 2;

  // Gear reduction.
  // E.g. 1000 rpm motor turns wheel at wheel_from_motor_rate * 1000 rpm.
  double wheel_from_motor_rate = 4;

  // diameter of wheel (in contact with ground) in meters
  double wheel_diameter_m = 5;
}

message FilterState {
  // UKF state
  farm_ng.core.proto.Pose pose = 1;
  PositionCovariance covariance_position = 2;
  VelocityCovariance covariance_velocity = 3;
  Innovation innovation = 4;
  bool has_converged = 5;
  bool is_calibrated = 6;
}

message PositionCovariance{
  // Position in squared meters and heading in squared radians
  double x = 1;
  double y = 2;
  double heading = 3;
}

message VelocityCovariance{
  // Linear velocity in squared meters per squared seconds and angular velocity in squared radians per squared seconds
  double linear = 1;
  double angular = 2;
}

message Innovation{
  // Innovation in meters and radians per second
  double gps = 1;
  double canbus = 2;
}
