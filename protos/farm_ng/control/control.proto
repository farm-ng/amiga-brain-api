// Copyright (c) farm-ng, inc.
//
// Licensed under the Amiga Development Kit License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://github.com/farm-ng/amiga-dev-kit/blob/main/LICENSE
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Copyright (c) farm-ng, inc. All rights reserved.

syntax = "proto3";


import "farm_ng/core/lie.proto";
import "farm_ng/core/linalg.proto";
import "farm_ng/core/pose.proto";

package farm_ng.control.proto;

// A track is a sequence of waypoints that the robot should follow or already drove.
message Track {
  // The name of the track
  string name = 1;
  // The waypoints along the track
  repeated farm_ng.core.proto.Pose waypoints = 2;
}

// This is sent to the controller service by a client to request a track be followed.
message TrackFollowRequest {
  // The track to follow
  Track track = 1;
  // Whether to drive the robot along the track in reverse or not.
  // This means negative velocity and is independent of driving the waypoints in reverse order.
  // See: track_reversed in ControllerTrackStatus
  bool reverse_driving = 2;
}

// The complete state of the controller.
message ControllerState {
  // The name of the track being followed
  string track_name = 1;
  // Status of the controller
  ControllerTrackStatus status = 2;
  // Progress along the track
  ControllerTrackProgress progress = 3;
  // Poses of the robot and relevant points along the track
  ControllerPoseTree poses = 4;
  // The commanded velocity in the robot's egocentric frame
  farm_ng.core.proto.Isometry3F64Tangent commands = 5;
}

// Status metrics of the controller
message ControllerTrackStatus {
  // Whether the controller has a track or not
  bool has_track = 1;
  // Whether the robot is following a track or not
  bool following_track = 2;
  // Whether the track waypoint order is reversed (last-to-first)
  bool track_reversed = 3;
  // Whether control is paused or not
  bool is_paused = 4;
  // Whether the controller is able to control the robot or not
  // Encapsulates auto_mode, filter_converged, and other factors
  bool is_controllable = 5;
  // Whether the amiga dashboard is in auto mode or not
  bool auto_mode = 6;
  // Whether the filter is converged or not
  bool filter_converged = 7;
}

// Progress metrics of the controller relative to the full track.
// This is useful as a component of the ControllerState message.
message ControllerTrackProgress {
  /* Index components */
  // The number of waypoints along the track
  int32 track_size = 1;
  // The index of the waypoint along the track being used as the control target.
  // The index order is reversed if the robot is driving the track in reverse order.
  // See: track_reversed in ControllerTrackStatus
  int32 goal_waypoint_index = 2;
  // The index of the waypoint along the track the robot is closest to.
  // The index order is reversed if the robot is driving the track in reverse order.
  // See: track_reversed in ControllerTrackStatus
  int32 closest_waypoint_index = 3;

  /* Distance components */
  // Estimate of the total distance along the track
  // This reflects a combination of linear [m] and angular [rad] distance
  double distance_total = 4;
  // Estimate of the remaining distance along the track
  // This reflects a combination of linear [m] and angular [rad] distance
  double distance_remaining = 5;

  /* Time components */
  // Estimate of the time [sec] it will take to traverse the full track
  // This is based on the anticipated velocity of the control commands,
  // as determined by controller parameters (e.g., max speed)
  double duration_total = 6;
  // Estimate of the time [sec] it will take to traverse the remaining track
  // This is based on the anticipated velocity of the control commands,
  // as determined by controller parameters (e.g., max speed)
  double duration_remaining = 7;

  /* Progress components */
  // Whether the robot completed following the track
  bool track_complete = 8;
  // Whether the robot failed to follow the track
  bool track_failed = 9;
}

// Poses of the robot and relevant points along the track
message ControllerPoseTree {
  // The pose of the robot in the world frame
  farm_ng.core.proto.Pose world_from_robot = 1;
  // The pose of the current goal (control target), in the robot frame.
  // This may be interpolated between track waypoints.
  farm_ng.core.proto.Pose robot_from_goal = 2;
  // The pose along the track that the robot is closest to, in the robot frame.
  // This may be interpolated between track waypoints.
  farm_ng.core.proto.Pose robot_from_closest_waypoint = 3;
}
