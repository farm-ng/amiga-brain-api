// Copyright (c) farm-ng, inc.
//
// Licensed under the Amiga Development Kit License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://github.com/farm-ng/amiga-dev-kit/blob/main/LICENSE
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Copyright (c) farm-ng, inc. All rights reserved.

syntax = "proto3";


import "farm_ng/core/lie.proto";
import "farm_ng/core/linalg.proto";
import "farm_ng/core/pose.proto";

package farm_ng.control.proto;


// A track is a sequence of poses that the robot should follow.
// This is sent to the controller by the user.
message ControllerTrack {
  // The name of the track
  string name = 1;
  // The poses of the track
  repeated farm_ng.core.proto.Pose poses = 2;
  // NOTE: Reverse driving is not yet implemented
  // // Whether to drive the robot along the track in reverse or not
  // // This means negative velocity and is independent of driving the
  // // track in the reverse order of poses along the track.
  // bool reverse_driving = 3;
}

// The complete state of the controller.
message ControllerState {
  // The name of the track being followed
  string name = 1;
  // Status of the controller
  ControllerTrackStatus status = 2;
  // Progress along the track
  ControllerTrackProgress progress = 3;
  // Poses of the robot and relevant points along the track
  ControllerPoseTree poses = 4;
  // The commanded velocity in the robot's egocentric frame
  farm_ng.core.proto.Isometry3F64Tangent commands = 5;
}

// Status metrics of the controller
message ControllerTrackStatus {
  // Whether the controller has a track or not
  bool has_track = 1;
  // Whether the robot is following a track or not
  bool following_track = 2;
  // Whether the controller is able to control the robot or not
  // Encapsulates auto_mode, filter_converged, and other factors
  bool is_controllable = 3;
  // Whether the amiga dashboard is in auto mode or not
  bool auto_mode = 4;
  // Whether the filter is converged or not
  bool filter_converged = 5;
  // Whether control is paused or not
  bool paused = 6;
}

// Progress metrics of the controller relative to the full track.
// This is useful as a component of the ControllerState message.
message ControllerTrackProgress {
  /* Index components */
  // The number of goal poses along the track
  int32 track_size = 1;
  // The index of the current goal along the track
  // The index order is reversed if the robot is driving the track in reverse order.
  int32 current_goal_index = 2;
  // The index of the closest point along the track
  // The index order is reversed if the robot is driving the track in reverse order.
  int32 closest_index = 3;

  /* Distance components */
  // Estimate of the total distance along the track
  // This reflects a combination of linear [m] and angular [rad] distance
  double distance_total = 4;
  // Estimate of the remaining distance along the track
  // This reflects a combination of linear [m] and angular [rad] distance
  double distance_remaining = 5;

  /* Time components */
  // Estimate of the time [sec] it will take to traverse the full track
  // This is based on the anticipated velocity of the control commands,
  // as determined by controller parameters (e.g., max speed)
  double duration_total = 6;
  // Estimate of the time [sec] it will take to traverse the remaining track
  // This is based on the anticipated velocity of the control commands,
  // as determined by controller parameters (e.g., max speed)
  double duration_remaining = 7;

  /* Progress components */
  // Whether the robot completed following the track
  bool track_complete = 8;
  // Whether the robot failed to follow the track
  bool track_failed = 9;
}

// Poses of the robot and relevant points along the track
message ControllerPoseTree {
  /* Poses */
  // The pose of the robot in the world frame
  farm_ng.core.proto.Pose world_from_robot = 1;
  // The pose of the current goal (control target) in the world frame
  // This pose may be interpolated between two poses along the track
  farm_ng.core.proto.Pose world_from_goal = 2;
  // The closest point to the robot along the track in the world frame
  // This pose may be interpolated between two poses along the track
  farm_ng.core.proto.Pose world_from_track = 3;
  // world_from_robot rotation about the z-axis [rad]
  double heading = 4;

  /* Pose differences */
  // The difference between world_from_robot and world_from_goal,
  // represented as [dx, dy, dz, droll, dpitch, dyaw] in [m] and [rad]
  farm_ng.core.proto.VecXF64 robot_from_goal = 5;
  // The difference between world_from_robot and world_from_track,
  // represented as [dx, dy, dz, droll, dpitch, dyaw] in [m] and [rad]
  farm_ng.core.proto.VecXF64 robot_from_track = 6;
}
