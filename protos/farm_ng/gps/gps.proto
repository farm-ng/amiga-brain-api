// Copyright (c) farm-ng, inc.
//
// Licensed under the Amiga Development Kit License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://github.com/farm-ng/amiga-dev-kit/blob/main/LICENSE
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "farm_ng/core/timestamp.proto";

package farm_ng.gps.proto;


message GpsdTpvFull {
  // Corresponds directly to all fields in:
  // https://gpsd.gitlab.io/gpsd/gpsd_json.html#_tpv
  // Always required fields
  string class = 1;  // Fixed: "TPV"
  int32 mode = 2;    // NMEA mode: 0=unknown, 1=no fix, 2=2D, 3=3D

  // Optional fields
  string device = 3; // Name of the originating device.
  float alt = 4;     // Deprecated. Undefined. Use altHAE or altMSL.
  float altHAE = 5;  // Altitude, height above ellipsoid, in meters. Probably WGS84.
  float altMSL = 6;  // MSL Altitude in meters. altMSL is altHAE minus geoidSep.
  int32 ant = 7;     // Antenna Status: 2=Short, 3=Open.
  float climb = 8;   // Climb (positive) or sink (negative) rate, meters per second.
  float clockbias = 9; // Offset of local GNSS clock relative to UTC, in ns. AKA Clock Offset.
  float clockdrift = 10; // The rate at which the local clock is drifting, in ns/s.
  string datum = 11; // Current datum. Hopefully WGS84.
  float depth = 12;  // Depth in meters.
  float dgpsAge = 13; // Age of DGPS data, in seconds.
  int32 dgpsSta = 14; // Station of DGPS data.
  float ecefx = 15; // ECEF X position in meters.
  float ecefy = 16; // ECEF Y position in meters.
  float ecefz = 17; // ECEF Z position in meters.
  float ecefpAcc = 18; // ECEF position error in meters. Certainty unknown.
  float ecefvx = 19; // ECEF X velocity in meters per second.
  float ecefvy = 20; // ECEF Y velocity in meters per second.
  float ecefvz = 21; // ECEF Z velocity in meters per second.
  float ecefvAcc = 22; // ECEF velocity error in meters per second. Certainty unknown.
  float epc = 23; // Estimated climb error in meters per second. Certainty unknown.
  float epd = 24; // Estimated track (direction) error in degrees. Certainty unknown.
  float eph = 25; // Estimated horizontal Position (2D) Error in meters. Also known as Estimated Position Error (epe). Certainty unknown.
  float eps = 26; // Estimated speed error in meters per second. Certainty unknown.
  float ept = 27; // Estimated time stamp error in seconds. Certainty unknown.
  float epx = 28; // Longitude error estimate in meters. Certainty unknown.
  float epy = 29; // Latitude error estimate in meters. Certainty unknown.
  float epv = 30; // Estimated vertical error in meters. Certainty unknown.
  float geoidSep = 31; // Geoid separation is the difference between the WGS84 reference ellipsoid and the geoid (Mean Sea Level) in meters.
  int32 jam = 32; // Jamming Indicator 0 (no jamming) to 255 (severe jamming). -1 means unset.
  float lat = 33; // Latitude in degrees: +/- signifies North/South.
  int32 leapseconds = 34; // Current leap seconds.
  float lon = 35; // Longitude in degrees: +/- signifies East/West.
  float magtrack = 36; // Course over ground, degrees magnetic.
  float magvar = 37; // Magnetic variation, degrees. Positive is West variation. Negative is East variation.
  float relD = 38; // Down component of relative position vector in meters.
  float relE = 39; // East component of relative position vector in meters.
  float relN = 40; // North component of relative position vector in meters.
  float sep = 41; // Estimated Spherical (3D) Position Error in meters. Certainty unknown.
  float speed = 42; // Speed over ground, meters per second.
  int32 status = 43; // GPS fix status: 0=Unknown, 1=Normal, 2=DGPS, 3=RTK Fixed, 4=RTK Floating, 5=DR, 6=GNSSDR, 7=Time (surveyed), 8=Simulated, 9=P(Y)
  float temp = 44; // Receiver temperature in degrees Celsius.
  string time = 45; // Time/date stamp in ISO8601 format, UTC. May have a fractional part of up to .001sec precision.
  float track = 46; // Course over ground, degrees from true north.
  float velD = 47; // Down velocity component in meters.
  float velE = 48; // East velocity component in meters.
  float velN = 49; // North velocity component in meters.
  float wanglem = 50; // Wind angle magnetic in degrees.
  float wangler = 51; // Wind angle relative in degrees.
  float wanglet = 52; // Wind angle true in degrees.
  float wspeedr = 53; // Wind speed relative in meters per second.
  float wspeedt = 54; // Wind speed true in meters per second.
  float wtemp = 55; // Water temperature in degrees Celsius.
}

message GpsFrameStatus {
    bool time_fully_resolved = 1; // means that the UTC time is known without full seconds ambiguity
    bool gnss_fix_ok = 2; // fixes not marked valid should not normally be used
    bool diff_soln = 4; // DGPS used
    bool heading_vehicle_valid = 3; // heading of vehicle is valid
}

message UtcStamp {
    // Based (closely) on the fields in NAV-PVT message
    // https://github.com/KumarRobotics/ublox/blob/master/ublox_msgs/msg/NavPVT.msg
    // But tweaked to match the UBX NAV-PVT message we get from the Ublox
    reserved 14; // Removed fields cannot be reused

    uint32 iTOW = 1;    // uint32 iTOW  -> GPS Millisecond time of week [ms]
    uint32 year = 2;    // uint16 year  -> Year (UTC)
    uint32 month = 3;   // uint8 month  -> Month, range 1..12 (UTC)
    uint32 day = 4;     // uint8 day    -> Day of month, range 1..31 (UTC)
    uint32 hour = 5;    // uint8 hour   -> Hour of day, range 0..23 (UTC)
    uint32 min = 6;     // uint8 min    -> Minute of hour, range 0..59 (UTC)
    uint32 sec = 7;     // uint8 second -> Seconds of minute, range 0..60 (UTC)
    int32 nano = 8;     // int32 nano   -> Fraction of second, range -1e9 .. 1e9 (UTC)
    uint32 tAcc = 9;    // uint32 tAcc  -> Time accuracy estimate (UTC)

    // Validity flags
    bool valid_date = 11;     // uint8 validDate -> Valid UTC Date
    bool valid_time = 12;     // uint8 validTime -> Valid UTC Time of Day
    bool fully_resolved = 13; // uint8 fullyResolved -> UTC time of day has been fully resolved (no seconds uncertainty)
    // Removed: int32 valid_mag = 14; // uint8 validMag -> Valid Magnetic Declination
}

message GpsFrame { // NAV-PVT
    farm_ng.core.proto.Timestamp stamp = 1;      // seconds, host receive time in monotonic clock
    farm_ng.core.proto.Timestamp gps_time = 14;  // seconds, measurement sample time converted to POSIX clock
    double longitude = 2;           // angle from meridian (Wgs84), radians (+ive easterly)
    double latitude = 3;            // angle from equator (Wgs84), radians  (+ive northerly)
    double altitude = 4;            // meters above Wgs84 reference geoid
    double heading_vehicle = 5;     // In radians (original Ublox is in degrees)
    double heading_motion = 6;      // will be valid if GROUND FILTERING is set
    float heading_accuracy = 7;     // Heading stddev radians? (both motion and vehicle)
    double ground_speed = 8;        // m/s Ground Speed (2-D)
    float speed_accuracy = 9;       // m/s Speed accuracy estimate
    double vel_north = 10;          // m/s N.E.D. north velocity
    double vel_east =11;            // m/s N.E.D. east velocity
    double vel_down = 12;           // m/s N.E.D. down velocity
    float horizontal_accuracy = 15; // stddev m/s?
    float vertical_accuracy = 16;   // stddev m/s?
    uint32 position_mode = 17;      // GNSSfix Type: 0: no fix 1: dead reckoning only 2: 2D-fix 3: 3D-fix 4: GNSS + dead reckoning combined 5: time only fix
    double p_dop = 18;              // Position DOP [1 / 0.01]
    double height = 19;             // Height above ellipsoid
    GpsFrameStatus status = 13;
    UtcStamp utc_stamp = 20;
    uint32 num_satellites = 21;      // Number of satellites used in Nav Solution
}

message RelativePositionFrame { // NAV-RELPOSNED
  farm_ng.core.proto.Timestamp stamp = 1;    // seconds, host receive time in monotonic clock
  farm_ng.core.proto.Timestamp gps_time = 2; // seconds, measurement sample time converted to POSIX clock
  uint32 base_station_id = 3;
  double relative_pose_north = 4;    // northerly distance from base in meters
  double relative_pose_east = 5;     // easterly distance from base in meters
  double relative_pose_down = 6;     // down distance from base in meters
  double relative_pose_heading = 7;  // bearing in radians (check?)
  double relative_pose_length = 8;   // radial distance in meters (check?)
  bool rel_pos_valid = 9;            // if relative position components and accuracies are valid and, in moving base mode only, if baseline is valid
  bool rel_heading_valid = 10;       // 1 if the components of the relative position vector (including the high-precision parts) are normalized
  float accuracy_north = 11;         // stddev meters
  float accuracy_east = 12;          // stddev meters
  float accuracy_down = 13;          // stddev meters
  float accuracy_length = 14;        // stddev meters
  float accuracy_heading = 15;       // stddev radians (check?)
  uint32 carr_soln = 16;              // Carrier phase range solution status: 0 = no carrier phase range solution 1 = carrier phase range solution with floating ambiguities 2 = carrier phase range solution with fixed ambiguities
  bool is_moving = 17;               // 1 if the receiver is operating in moving base mode
  bool ref_obs_miss = 18;            // 1 if extrapolated reference observations were used to compute moving base solution this epoch
  bool ref_pos_miss = 19;            // 1 if extrapolated reference position was used to compute moving base solution this epoch
  bool ref_pos_normalized = 20;      // ?
  bool gnss_fix_ok = 21;
  bool base_coords_known = 22;       // 1 if the base / reference station coordinates are known
  GpsCoordinates base_coords = 23;   // base / reference station coordinates, if known
}

message GpsCoordinates {
  // Not necessarily a reading directly from the GPS receiver.
  // Likely a created / calculated set of GPS coordinates.
  double longitude = 1; // angle from meridian (Wgs84), radians (+ive easterly)
  double latitude = 2;  // angle from equator (Wgs84), radians  (+ive northerly)
  double altitude = 3;  // meters above Wgs84 reference geoid
}

message EcefCoordinates {
  farm_ng.core.proto.Timestamp stamp = 1;    // seconds, host receive time in monotonic clock
  farm_ng.core.proto.Timestamp gps_time = 2; // seconds, measurement sample time converted to POSIX clock
  double x = 3;    // meters
  double y = 4;    // meters
  double z = 5;    // meters
  float accuracy = 6;   // stddev meters
  EcefFlags flags = 7;
}

message EcefFlags {
  bool INVALID_ECEF = 1;
}
